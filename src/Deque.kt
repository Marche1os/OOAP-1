interface QueueBase<T> {

    // конструктор
    // постусловие: создана пустая очередь
    fun getQueue(): QueueBase<T>

    // команды:

    // постусловие: в хвост очереди добавлен новый элемент
    fun addTail(value: T)

    // предусловие: очередь не пуста;
    // постусловие: из головы очереди удалён элемент
    fun removeFront()

    // запросы:

    // предусловие: очередь не пуста
    fun getFront(): T // получить элемент из головы очереди;

    fun size(): Int // текущий размер очереди

    // запросы статусов (возможные значения статусов)
    fun get_dequeue_status(): Int // успешно; очередь пуста
    fun get_get_status(): Int // успешно; очередь пуста
}

interface Queue<T> : QueueBase<T>

interface Deque<T> : QueueBase<T> {
    // Команды

    // постусловие: новый элемент добавлен в начало очереди, размер увеличился на 1
    fun addFront(value: T)

    // предусловие: очередь не пуста
    // постусловие: из хвоста очереди удален элемент, размер уменьшился на 1
    fun removeTail()

    // предусловие: очередь не пуста
    fun getTail(): T

    fun getRemoveTailStatus() // успех; очередь пуста
    fun getGetTailStatus() // успех; очередь пуста
}