abstract public class LinkedListBase<T> {

    //команды:

    //предусловие: список не пуст
    //постусловие: курсор указывает на первый элемент списка
    abstract void head();

    //предусловие: список не пуст
    //постусловие: курсор указывает на последний элемент списка
    abstract void tail();

    //предусловие: список не пуст и курсор на текущий элемент указывает не на последний элемент в списке
    //постусловие: курсор сместился на следующий элемент
    abstract void right();

    //постусловие: следующий элемент после текущего - вставляемое значение. Прежний следующий элемент теперь также содержит ссылку на свой левый элемент - вставленное значение, если вставка была не в хвост
    abstract void put_right(final T value);

    //постусловие: текущее значение содержит ссылку на вставленный узел. Ссылки у прежнего элемента, текущего и у вставляемого корректны проставлены. Пограничный случай: вставка в голову списка
    abstract void put_left(final T value);

    /**
     * предусловие: список не пуст
     * постусловие: текущий узел удален, т.е.
     * До удаления узла B: A <-> B <-> C.
     * После удаления узла B: A <-> C
     * Двунаправленная стрелка <-> указывает ссылку как на следующий узел, так и на предыдущий.
     *
     * И если узел не последний, тогда указатель на текущий элемент перемещается вправо.
     * Иначе, если узел узел не первый, тогда указатель на текущий элемент перемещается влево.
     * Иначе - удаление единственного элемента списка - по-сути, очистка списка
     */
    abstract void remove();

    //постусловие: список пуст
    abstract void clear();

    //запросы:

    abstract int size();

    //предусловие: курсор установлен на какой-либо элемент (список не пуст)
    abstract T get();
}
