interface HashTableBase<T> {

    //конструктор

    //постусловие: создана пустая хэш-таблица заданного размера
    fun HashTable(sz: Int): HashTableBase<T>

    // команды

    //предусловие: в таблице имеется свободный слот для value;
    //постусловие: в таблицу добавлено новое значение
    fun put(value: T)

    //предусловие: в таблице имеется значение value;
    //постусловие: из таблицы удалено значение value
    fun remove(value: T)

    //запросы

    fun get(value: T): Boolean; // содержится ли значение value в таблице
    fun size(): Int; // количество элементов в таблице

    //запросы статусов (возможные значения статусов)
    fun get_put_status(): Int; // успешно;

    //система коллизий не смогла найти свободный слот для значения
    fun get_remove_status(): Int; // успешно; значения нету в таблице
}

interface PowerSet<T> : HashTableBase<T> {

    // Конструктор
    // Постусловие: создано пустое множество
    fun PowerSet(maxSize: Int): PowerSet<T>

    // Команды

    // Предусловие: добавляемое значение отсутствует в множестве
    // Постусловие: добавлен элемент в множество
    override fun put(value: T)

    // Запросы

    // Чистая функция. Возвращает пересечение множеств
    fun intersection(set: PowerSet<T>): PowerSet<T>

    // Чистая функция. Возвращает объединение двух множеств
    fun union(set: PowerSet<T>): PowerSet<T>

    // Чистая функция. Возвращается подмножество текущего множества из таких элементов, которые не входят в множество-параметр
    fun difference(set: PowerSet<T>): PowerSet<T>

    // Чистая функция. Проверяется, входят ли все элементы множества-параметра в текущее множество (будет ли множество-параметр подмножеством текущего множества)
    fun isSubset(set: PowerSet<T>): PowerSet<T>

    // Статусы

    override fun get_put_status(): Int // OK, добавляемый элемент уже присутствует в множестве
}